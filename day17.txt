#Dunder Methods
#Inheritance-----super method

-------> Dunder Methods:- When in classes we use Object and try to print objects using inbuilt functions we don't get proper output and get error that func(len,print) doesn't exits. In python to use inbuilt func as objects in classes  we use dunder methods
=> To print data we use Dunder Methods.
=> Dunder Methods is also called as magic methods or speacial methods or double underscore Methods.
=> By using Dunder Methods we can create relationship between objects and in built methods.
=> inbuilt method = print , len, etc.

=====>
class vehicle:
  def __init__ (self, selfdriven, autogear, adsystem):
    self.selfdriven = selfdriven
    self.autogear = autogear
    self.adsystem = adsystem
nissan = vehicle(False, 'yes', 'yes')
print(nissan)

OUTPUT:-   <__main__.vehicle object at 0x7dee4f3a15a0> // Vehicle memory position is returned

======>
class vehicle:
  def __init__ (self, selfdriven, autogear, adsystem):
    self.selfdriven = selfdriven
    self.autogear = autogear
    self.adsystem = adsystem
  def __str__(self):                      => Dunder method (__str__) in built
    return f"{self.selfdriven}, {self.autogear}, {self.adsystem}"
nissan = vehicle(False, 'yes', 'yes')
print(nissan)

OUTPUT:-   False, yes, yes

=======>
class vehicle:
  def __init__ (self, selfdriven, autogear, adsystem):
    self.selfdriven = selfdriven
    self.autogear = autogear
    self.adsystem = adsystem
  def __str__(self):
    return f"{self.selfdriven}, {self.autogear}, {self.adsystem}"
nissan = vehicle(False, 'yes', 'yes')
tesla =  vehicle(True, 'no', 'yes')

print(nissan)
print(nissan==tesla) => use equal to Dunder method otherwise it shows 'false'
print(nissan==kia)
print(ford==kia)

OUTPUT:-   False, yes, yes
           False
           False
           False

======>
class vehicle:
  def __init__ (self, selfdriven, autogear, adsystem):
    self.selfdriven = selfdriven
    self.autogear = autogear
    self.adsystem = adsystem
  def __str__(self):
    return f"{self.selfdriven}, {self.autogear}, {self.adsystem}"
  def __eq__(self, others):
    return self.selfdriven==others.selfdriven and self.autogear==others.autogear and self.adsystem==others.adsystem
nissan = vehicle(False, 'yes', 'yes')
tesla =  vehicle(True, 'no', 'yes')
kia = vehicle(False, 'yes', 'yes')
ford = vehicle(False, 'yes', 'yes')
print(nissan)
print(nissan==tesla)
print(nissan==kia)
print(ford==kia)
print(len(kia))   =>type error

OUTPUT:-    False, yes, yes
            False
            True
            True
            TypeError: object of type 'vehicle' has no len()

========>
class vehicle:
  def __init__ (self, selfdriven, autogear, adsystem, tyres):
    self.selfdriven = selfdriven
    self.autogear = autogear
    self.adsystem = adsystem
    self.tyres = tyres
  def __str__(self):
    return f"{self.selfdriven}, {self.autogear}, {self.adsystem}"
  def __eq__(self, others):
    return self.selfdriven==others.selfdriven and self.autogear==others.autogear and self.adsystem==others.adsystem
  def __len__(self):
    return self.tyres
nissan = vehicle(False, 'yes', 'yes', 4)
tesla =  vehicle(True, 'no', 'yes', 4)
kia = vehicle(False, 'yes', 'yes', 4)
ford = vehicle(False, 'yes', 'yes', 5)
print(len(kia))

OUTPUT:- 5



---------> Super Method:- super method is used to inherite data from the parent class to decrease code by reusability.

class college:
  def __init__(self, student_id, student_name, student_class):
    self.student_id = student_id
    self.student_name = student_name
    self.student_class = student_class
  def orientation(self):
    return "This is about academics orientation"
class playground(college):
  def __init__(self, student_id, student_name, student_class, student_game):
    super().__init__(student_id, student_name, student_class)
    self.student_game = student_game
  def orientation(self):
    return super().orientation() + " and physical education Orentation"

rama = college(1, 'Rama', 9)
rama_playground = playground(1, 'Rama', 9, 'TT')
seeta = playground(2, 'Seeta', 9, 'TT')
print(rama_playground.student_game)
print(rama_playground.student_name)
print(seeta.student_game)
print(seeta.orientation())

OUTPUT:-
TT
Rama
TT
This is about academics orientation and physical education Orentation

